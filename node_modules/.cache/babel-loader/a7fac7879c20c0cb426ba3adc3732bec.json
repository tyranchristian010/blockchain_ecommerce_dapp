{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//this file configures the connection to the blockchain. so we import ethers.js and the contract object of ethers\nimport { ethers, Contract } from 'ethers';\nimport PaymentProcessor from './abis/PaymentProcessor.json';\nimport Dai from './abis/Dai.json';\n\nvar getBlockchain = function getBlockchain() {\n  return (//getBlockchain creates our connection to ethereum and returns a Promise\n    new Promise(function (resolve, reject) {\n      //A promise is an object to deal with asynchronous code. when we call resolve the promise is finished\n      window.addEventListener('load',\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var provider, signer, signerAddress, paymentProcessor, dai;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 3;\n                return window.ethereum.enable();\n\n              case 3:\n                provider = new ethers.providers.Web3Provider(window.ethereum); //we creat a provider with ethers which is basically a connector to the blockchain\n\n                signer = provider.getSigner(); //with this we are able to send tx.\n\n                _context.next = 7;\n                return signer.getAddress();\n\n              case 7:\n                signerAddress = _context.sent;\n                //now we instantiate an object to interact with our smart contracts.\n                paymentProcessor = new Contract(PaymentProcessor.networks[window.ethereum.networkVersion].address, PaymentProcessor.abi, signer);\n                dai = new Contract(Dai.networks[window.ethereum.networkVersion].address, //for mainnet and public testnet replace by address of already deployed dai token\n                Dai.abi, signer);\n                resolve({\n                  provider: provider,\n                  paymentProcessor: paymentProcessor,\n                  dai: dai\n                }); //when we call resolve the promise is finished we got what we wanted and we return \n                //the provider, paymentProcessor and dai objects.\n                //and if we dont have metamask installed we return undefined for everything.   \n\n              case 11:\n                resolve({\n                  provider: undefined,\n                  paymentProcessor: undefined,\n                  dai: undefined\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })));\n    })\n  );\n};\n\nexport default getBlockchain;","map":{"version":3,"sources":["/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/src/ethereum.js"],"names":["ethers","Contract","PaymentProcessor","Dai","getBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","getAddress","signerAddress","paymentProcessor","networks","networkVersion","address","abi","dai","undefined"],"mappings":";;AAAA;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAA8B;AAClD,QAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAkB;AACjDC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,+BAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC3BD,MAAM,CAACE,QADoB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEtBF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAFsB;;AAAA;AAGtBC,gBAAAA,QAHsB,GAGX,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAHW,EAG0C;;AAChEK,gBAAAA,MAJsB,GAIbH,QAAQ,CAACI,SAAT,EAJa,EAIqC;;AAJrC;AAAA,uBAKAD,MAAM,CAACE,UAAP,EALA;;AAAA;AAKtBC,gBAAAA,aALsB;AAOnC;AACaC,gBAAAA,gBARsB,GAQH,IAAIlB,QAAJ,CACvBC,gBAAgB,CAACkB,QAAjB,CAA0BZ,MAAM,CAACE,QAAP,CAAgBW,cAA1C,EAA0DC,OADnC,EAEvBpB,gBAAgB,CAACqB,GAFM,EAGvBR,MAHuB,CARG;AActBS,gBAAAA,GAdsB,GAchB,IAAIvB,QAAJ,CACVE,GAAG,CAACiB,QAAJ,CAAaZ,MAAM,CAACE,QAAP,CAAgBW,cAA7B,EAA6CC,OADnC,EAC4C;AACtDnB,gBAAAA,GAAG,CAACoB,GAFM,EAGVR,MAHU,CAdgB;AAoB5BT,gBAAAA,OAAO,CAAC;AAACM,kBAAAA,QAAQ,EAARA,QAAD;AAAWO,kBAAAA,gBAAgB,EAAhBA,gBAAX;AAA6BK,kBAAAA,GAAG,EAAHA;AAA7B,iBAAD,CAAP,CApB4B,CAoB+B;AACH;AACA;;AAtB5B;AAwB9BlB,gBAAAA,OAAO,CAAC;AAACM,kBAAAA,QAAQ,EAAEa,SAAX;AAAsBN,kBAAAA,gBAAgB,EAAEM,SAAxC;AAAmDD,kBAAAA,GAAG,EAAEC;AAAxD,iBAAD,CAAP;;AAxB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhC;AA0BD,KA3BD;AADoB;AAAA,CAAtB;;AA8BA,eAAerB,aAAf","sourcesContent":["//this file configures the connection to the blockchain. so we import ethers.js and the contract object of ethers\nimport { ethers, Contract } from 'ethers';\nimport PaymentProcessor from './abis/PaymentProcessor.json';\nimport Dai from './abis/Dai.json';\n\nconst getBlockchain = () =>                         //getBlockchain creates our connection to ethereum and returns a Promise\n  new Promise((resolve, reject) => {                 //A promise is an object to deal with asynchronous code. when we call resolve the promise is finished\n    window.addEventListener('load', async () => {        //So we wait for everything to be loaded in the browser. which fires and event called load\n      if(window.ethereum) {                                  //if metamask is present we will call .enable to show a pop up to the user asking them permission to grant metamask access to the app\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);  //we creat a provider with ethers which is basically a connector to the blockchain\n        const signer = provider.getSigner();                             //with this we are able to send tx.\n        const signerAddress = await signer.getAddress();\n\n //now we instantiate an object to interact with our smart contracts.\n        const paymentProcessor = new Contract(\n          PaymentProcessor.networks[window.ethereum.networkVersion].address,\n          PaymentProcessor.abi,\n          signer\n        );\n\n        const dai = new Contract(\n          Dai.networks[window.ethereum.networkVersion].address, //for mainnet and public testnet replace by address of already deployed dai token\n          Dai.abi,\n          signer\n        );\n\n        resolve({provider, paymentProcessor, dai});                //when we call resolve the promise is finished we got what we wanted and we return \n                                                                //the provider, paymentProcessor and dai objects.\n                                                                //and if we dont have metamask installed we return undefined for everything.   \n      }\n      resolve({provider: undefined, paymentProcessor: undefined, dai: undefined});\n    });\n  });\n\nexport default getBlockchain;"]},"metadata":{},"sourceType":"module"}