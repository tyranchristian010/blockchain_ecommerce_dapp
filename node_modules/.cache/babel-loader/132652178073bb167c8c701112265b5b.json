{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/src/components/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport getBlockchain from '../ethereum';\nimport Store from './Store';\n\nfunction App() {\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      paymentProcessor = _useState2[0],\n      setPaymentProcessor = _useState2[1]; //1st define our state which is our pointer to our smart contract and the function we use to modify the state\n\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dai = _useState4[0],\n      setDai = _useState4[1]; //same thing for the dai pointer you can define as many states as you want.\n\n\n  useEffect(function () {\n    //use Effect is used to trigger any asynchronous operation. and we give it an array [] of variable at the end. the empty array represents what should be watched to trigger the useEffect. useEffect is similar to componentWillMount so we use an empty array because we only want to run useeffect once.\n    var init =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _ref2, paymentProcessor, dai;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getBlockchain();\n\n              case 2:\n                _ref2 = _context.sent;\n                paymentProcessor = _ref2.paymentProcessor;\n                dai = _ref2.dai;\n                setPaymentProcessor(paymentProcessor); //once we have the two pointer variables we are able to update our state. So the new value of the state is the now activated variable paymentProcessor\n\n                setDai(dai); //once we have the two pointer variables we are able to update our state. So the new value of the state is the now activated variable dai\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function init() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    init();\n  }, []); //Install Metamask\n\n  if (typeof window.ethereum === 'undefined') {\n    //if metamask is not found. \n    return (//we will return a div that spans across the entire page. telling you to install metamask\n      React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Blockchain Ecommerce DApp\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"You Need To Install The Latest Version Of Metamask\")))\n    );\n  } //if metamask was found we render the same title but this tike we will show our <Store> component and pass it the contract pointer objects paymentProcessor and dai\n\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-sm-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Blockchain Ecommerce DApp\"), React.createElement(Store, {\n    paymentProcessor: paymentProcessor,\n    dai: dai,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/src/components/App.js"],"names":["React","useEffect","useState","getBlockchain","Store","App","undefined","paymentProcessor","setPaymentProcessor","dai","setDai","init","window","ethereum"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,aAAP,MAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,SAASC,GAAT,GAAe;AAAA,kBACmCH,QAAQ,CAACI,SAAD,CAD3C;AAAA;AAAA,MACNC,gBADM;AAAA,MACYC,mBADZ,kBACwD;;;AADxD,mBAESN,QAAQ,CAACI,SAAD,CAFjB;AAAA;AAAA,MAENG,GAFM;AAAA,MAEDC,MAFC,kBAEyD;;;AAExET,EAAAA,SAAS,CAAC,YAAI;AAAwD;AACpE,QAAMU,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC2BR,aAAa,EADxC;;AAAA;AAAA;AACJI,gBAAAA,gBADI,SACJA,gBADI;AACcE,gBAAAA,GADd,SACcA,GADd;AAEXD,gBAAAA,mBAAmB,CAACD,gBAAD,CAAnB,CAFW,CAEuD;;AAClEG,gBAAAA,MAAM,CAACD,GAAD,CAAN,CAHW,CAGuD;;AAHvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAJE,IAAI;AAAA;AAAA;AAAA,OAAV;;AAKAA,IAAAA,IAAI;AACL,GAPQ,EAON,EAPM,CAAT,CAJe,CAaf;;AACA,MAAG,OAAOC,MAAM,CAACC,QAAd,KAAyB,WAA5B,EAAyC;AAA6B;AACpE,WAAoE;AAClE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAFF,CADF;AADF;AAQD,GAvBc,CAwBf;;;AACE,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE,oBAAC,KAAD;AAAO,IAAA,gBAAgB,EAAEN,gBAAzB;AAA2C,IAAA,GAAG,EAAEE,GAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAQD;;AAED,eAAeJ,GAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport getBlockchain from '../ethereum';\nimport Store from './Store';\n\nfunction App() {\n  const [paymentProcessor, setPaymentProcessor] = useState(undefined); //1st define our state which is our pointer to our smart contract and the function we use to modify the state\n  const [dai, setDai] = useState(undefined);                            //same thing for the dai pointer you can define as many states as you want.\n\nuseEffect(()=>{                                                       //use Effect is used to trigger any asynchronous operation. and we give it an array [] of variable at the end. the empty array represents what should be watched to trigger the useEffect. useEffect is similar to componentWillMount so we use an empty array because we only want to run useeffect once.\n  const init = async ()=>{                                            //because we are not allowed to pass async to useEffect we define another async function init() inside to initialize our variables. And we trigger it by calling init() after.\n    const {paymentProcessor, dai} = await getBlockchain();            \n    setPaymentProcessor(paymentProcessor);                            //once we have the two pointer variables we are able to update our state. So the new value of the state is the now activated variable paymentProcessor\n    setDai(dai);                                                      //once we have the two pointer variables we are able to update our state. So the new value of the state is the now activated variable dai\n  }\n  init();\n}, []);\n\n//Install Metamask\nif(typeof window.ethereum==='undefined') {                            //if metamask is not found. \n  return(                                                             //we will return a div that spans across the entire page. telling you to install metamask\n    <div className=\"container\">\n      <div className=\"col-sm-12\">\n        <h1>Blockchain Ecommerce DApp</h1>\n        <p>You Need To Install The Latest Version Of Metamask</p>\n      </div>\n    </div>\n  );\n}\n//if metamask was found we render the same title but this tike we will show our <Store> component and pass it the contract pointer objects paymentProcessor and dai\n  return (\n    <div className=\"container\">                                     \n      <div className=\"col-sm-12\">\n        <h1>Blockchain Ecommerce DApp</h1>\n        <Store paymentProcessor={paymentProcessor} dai={dai}/>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n\n\n"]},"metadata":{},"sourceType":"module"}