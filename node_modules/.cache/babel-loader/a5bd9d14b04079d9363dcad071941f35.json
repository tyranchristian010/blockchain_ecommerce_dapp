{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ethers, Contract } from 'ethers'; //this file configures the connection to the blockchain. so we import ethers.js and the contract object of ethers\n\nimport PaymentProcessor from '../src/abis/PaymentProcessor.json';\nimport Dai from '../src/abis/Dai.json';\n\nvar getBlockchain = function getBlockchain() {\n  //getBlockchain creates our connection to ethereum and returns a Promise\n  new Promise(function (resolve, reject) {\n    //A promise is an object to deal with asynchronous code. when we call resolve the promise is finished\n    window.addEventListener('load',\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var provider, signer, paymentProcessor, dai;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 3;\n              return window.ethereum.enable();\n\n            case 3:\n              provider = new ethers.providers.Web3Provider(window.ethereum); //we creat a provider with ethers which is basically a connector to the blockchain\n\n              signer = provider.getSigner(); //with this we are able to send tx.\n              //now we instantiate an object to interact with our smart contracts.\n\n              paymentProcessor = new Contract(PaymentProcessor.networks[window.ethereum.networkVersion].address, PaymentProcessor.abi, signer);\n              dai = new Contract(Dai.networks[window.ethereum.networkVersion].address, Dai.abi, signer);\n              resolve({\n                provider: provider,\n                paymentProcessor: paymentProcessor,\n                dai: dai\n              }); //when we call resolve the promise is finished we got what we wanted and we return \n              //the provider, paymentProcessor and dai objects.\n              //and if we dont have metamask installed we return undefined for everything.                                               \n\n            case 8:\n              resolve({\n                provider: undefined,\n                paymentProcessor: undefined,\n                dai: undefined\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n  });\n};\n\nexport default getBlockchain; //import this function into App.js","map":{"version":3,"sources":["/Users/admin/Desktop/GITHUB2021/blockchain_ecommerce_app/src/ethereum.js"],"names":["ethers","Contract","PaymentProcessor","Dai","getBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","paymentProcessor","networks","networkVersion","address","abi","dai","undefined"],"mappings":";;AAAA,SAAQA,MAAR,EAAgBC,QAAhB,QAA+B,QAA/B,C,CAAgE;;AAChE,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAOC,GAAP,MAAgB,sBAAhB;;AAEA,IAAMC,aAAa,GAAE,SAAfA,aAAe,GAAI;AAAwC;AAC7D,MAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAA6B;AACxDC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACzBD,MAAM,CAACE,QADkB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAElBF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAFkB;;AAAA;AAGlBC,cAAAA,QAHkB,GAGT,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAHS,EAG2C;;AAC7DK,cAAAA,MAJkB,GAIXH,QAAQ,CAACI,SAAT,EAJW,EAI4C;AAEpE;;AACMC,cAAAA,gBAPkB,GAOC,IAAIhB,QAAJ,CACrBC,gBAAgB,CAACgB,QAAjB,CAA0BV,MAAM,CAACE,QAAP,CAAgBS,cAA1C,EAA0DC,OADrC,EAErBlB,gBAAgB,CAACmB,GAFI,EAGrBN,MAHqB,CAPD;AAYlBO,cAAAA,GAZkB,GAYZ,IAAIrB,QAAJ,CACRE,GAAG,CAACe,QAAJ,CAAaV,MAAM,CAACE,QAAP,CAAgBS,cAA7B,EAA6CC,OADrC,EAERjB,GAAG,CAACkB,GAFI,EAGRN,MAHQ,CAZY;AAiBxBT,cAAAA,OAAO,CAAC;AAACM,gBAAAA,QAAQ,EAARA,QAAD;AAAWK,gBAAAA,gBAAgB,EAAhBA,gBAAX;AAA6BK,gBAAAA,GAAG,EAAHA;AAA7B,eAAD,CAAP,CAjBwB,CAiBsB;AACA;AACA;;AAnBtB;AAqB5BhB,cAAAA,OAAO,CAAC;AAACM,gBAAAA,QAAQ,EAAEW,SAAX;AAAsBN,gBAAAA,gBAAgB,EAACM,SAAvC;AAAkDD,gBAAAA,GAAG,EAACC;AAAtD,eAAD,CAAP;;AArB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AAuBH,GAxBD;AAyBH,CA1BD;;AA2BA,eAAenB,aAAf,C,CAEA","sourcesContent":["import {ethers, Contract} from 'ethers';                        //this file configures the connection to the blockchain. so we import ethers.js and the contract object of ethers\nimport PaymentProcessor from '../src/abis/PaymentProcessor.json';\nimport Dai from '../src/abis/Dai.json';\n\nconst getBlockchain =()=>{                                       //getBlockchain creates our connection to ethereum and returns a Promise\n    new Promise((resolve, reject)=>{                            //A promise is an object to deal with asynchronous code. when we call resolve the promise is finished\n        window.addEventListener('load', async () =>{            //So we wait for everything to be loaded in the browser. which fires and event called load\n            if(window.ethereum) {                               //if metamask is present we will call .enable to show a pop up to the user asking them permission to grant metamask access to the app\n                await window.ethereum.enable();\n                const provider=new ethers.providers.Web3Provider(window.ethereum); //we creat a provider with ethers which is basically a connector to the blockchain\n                const signer=provider.getSigner();                                  //with this we are able to send tx.\n\n                //now we instantiate an object to interact with our smart contracts.\n                const paymentProcessor = new Contract(\n                    PaymentProcessor.networks[window.ethereum.networkVersion].address,\n                    PaymentProcessor.abi,\n                    signer\n                );\n                const dai = new Contract(\n                    Dai.networks[window.ethereum.networkVersion].address,\n                    Dai.abi,\n                    signer\n                );\n                resolve({provider, paymentProcessor, dai});   //when we call resolve the promise is finished we got what we wanted and we return \n                                                              //the provider, paymentProcessor and dai objects.\n                                                              //and if we dont have metamask installed we return undefined for everything.                                               \n            }\n            resolve({provider: undefined, paymentProcessor:undefined, dai:undefined});\n        });\n    });   \n}\nexport default getBlockchain;\n\n//import this function into App.js"]},"metadata":{},"sourceType":"module"}